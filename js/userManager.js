// Gestionnaire d'utilisateurs et de sauvegarde
class UserManager {
    constructor() {
        this.currentUser = null;
        this.wordsFound = [];
        
        // Pr√©fixe unique pour √©viter les conflits avec d'autres applications
        this.COOKIE_PREFIX = 'categories_game_';
        
        // Session Manager pour la gestion de session multi-app
        this.sessionManager = new SessionManager();
    }

    // Connexion d'un utilisateur
    login(username) {
        if (!username || username.trim() === '') {
            return false;
        }

        this.currentUser = username.trim();
        
        // Sauvegarder la session (partag√©e entre toutes les apps)
        this.sessionManager.login(this.currentUser);
        
        this.loadUserData();
        return true;
    }

    // D√©connexion
    logout() {
        // D√©connecter de la session partag√©e
        this.sessionManager.logout();
        
        this.currentUser = null;
        this.wordsFound = [];
    }

    // Charger les donn√©es utilisateur depuis les cookies
    loadUserData() {
        if (!this.currentUser) return;

        console.log('üìÇ Chargement des donn√©es pour:', this.currentUser);

        // Charger les mots trouv√©s
        const wordsFoundCookie = this.getCookie(`${this.COOKIE_PREFIX}wordsFound_${this.currentUser}`);
        if (wordsFoundCookie) {
            try {
                const loaded = JSON.parse(wordsFoundCookie);
                console.log('üì• Mots charg√©s depuis cookie:', loaded);
                
                // Nettoyer les doublons
                this.wordsFound = [...new Set(loaded)];
                
                console.log('üßπ Mots apr√®s nettoyage des doublons:', this.wordsFound);
                
                // Sauvegarder les donn√©es nettoy√©es
                this.saveUserData();
            } catch (e) {
                console.error('‚ùå Erreur lors du chargement des mots:', e);
            }
        } else {
            console.log('‚ÑπÔ∏è Aucun mot sauvegard√© pour cet utilisateur');
        }
    }

    // Sauvegarder les donn√©es utilisateur
    saveUserData() {
        if (!this.currentUser) return;

        console.log('üíæ Sauvegarde des donn√©es pour:', this.currentUser);
        console.log('üìù Mots √† sauvegarder:', this.wordsFound);

        // Sauvegarder les mots trouv√©s
        this.setCookie(`${this.COOKIE_PREFIX}wordsFound_${this.currentUser}`, JSON.stringify(this.wordsFound), 365);
        
        console.log('‚úÖ Sauvegarde termin√©e');
    }

    // Ajouter un mot trouv√©
    addWordFound(word) {
        if (!this.currentUser) return;
        
        // V√©rifier si le mot n'est pas d√©j√† dans la liste
        if (!this.wordsFound.includes(word)) {
            console.log(`‚ûï Ajout du mot "${word}"`);
            this.wordsFound.push(word);
            console.log(`üìä Total de mots trouv√©s: ${this.wordsFound.length}`);
            this.saveUserData();
        } else {
            console.log(`‚ö†Ô∏è Mot "${word}" d√©j√† trouv√©, pas d'ajout`);
        }
    }

    // Obtenir les mots trouv√©s
    getWordsFound() {
        return this.wordsFound || [];
    }

    // Obtenir les mots disponibles (excluant ceux d√©j√† trouv√©s)
    getAvailableWords(allWords) {
        return allWords.filter(word => !this.wordsFound.includes(word));
    }

    // V√©rifier si un utilisateur existe
    userExists(username) {
        const wordsFoundCookie = this.getCookie(`${this.COOKIE_PREFIX}wordsFound_${username}`);
        return wordsFoundCookie !== null;
    }

    // Obtenir tous les utilisateurs existants
    getAllUsers() {
        const users = [];
        const cookies = document.cookie.split(';');
        
        cookies.forEach(cookie => {
            const trimmed = cookie.trim();
            if (trimmed.startsWith(`${this.COOKIE_PREFIX}wordsFound_`)) {
                const username = trimmed.split('=')[0].replace(`${this.COOKIE_PREFIX}wordsFound_`, '');
                if (username && !users.includes(username)) {
                    users.push(username);
                }
            }
        });
        
        return users.sort();
    }

    // Obtenir tous les mots trouv√©s
    getAllWordsFound() {
        return [...new Set(this.wordsFound)]; // Supprime les doublons
    }
    
    // R√©initialiser compl√®tement les donn√©es de l'utilisateur (utile pour debug)
    resetAllUserData() {
        if (!this.currentUser) return;
        
        console.log('üóëÔ∏è R√©initialisation compl√®te des donn√©es pour:', this.currentUser);
        
        this.wordsFound = [];
        this.saveUserData();
        
        console.log('‚úÖ Toutes les donn√©es ont √©t√© r√©initialis√©es');
    }

    // V√©rifier si un utilisateur est connect√©
    isLoggedIn() {
        return this.currentUser !== null && this.sessionManager.isLoggedIn();
    }
    
    // Restaurer automatiquement la session au chargement
    restoreSession() {
        if (this.sessionManager.isLoggedIn()) {
            const savedUser = this.sessionManager.getCurrentUser();
            if (savedUser) {
                this.currentUser = savedUser;
                this.loadUserData();
                return true;
            }
        }
        return false;
    }

    // Obtenir le nom de l'utilisateur connect√©
    getCurrentUser() {
        return this.currentUser;
    }

    // Gestion des cookies
    setCookie(name, value, days) {
        const expires = new Date();
        expires.setTime(expires.getTime() + (days * 24 * 60 * 60 * 1000));
        const encodedValue = encodeURIComponent(value);
        document.cookie = `${name}=${encodedValue};expires=${expires.toUTCString()};path=/`;
        console.log(`üç™ Cookie enregistr√©: ${name}`);
    }

    getCookie(name) {
        const nameEQ = name + "=";
        const ca = document.cookie.split(';');
        for (let i = 0; i < ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) === ' ') c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) === 0) {
                const encodedValue = c.substring(nameEQ.length, c.length);
                return decodeURIComponent(encodedValue);
            }
        }
        return null;
    }

    // Supprimer un cookie
    deleteCookie(name) {
        document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 UTC;path=/;`;
    }

    // Sauvegarder les pr√©f√©rences utilisateur
    saveUserPreferences(preferences) {
        this.setCookie(`${this.COOKIE_PREFIX}userPreferences`, JSON.stringify(preferences), 365);
    }

    // Charger les pr√©f√©rences utilisateur
    getUserPreferences() {
        const prefsCookie = this.getCookie(`${this.COOKIE_PREFIX}userPreferences`);
        if (prefsCookie) {
            return JSON.parse(prefsCookie);
        }
        return {
            selectedCategory: 'toutes'
        };
    }
}
